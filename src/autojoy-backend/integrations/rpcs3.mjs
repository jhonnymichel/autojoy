import path from "path";
import fs from "fs";
import mmjoystick from "./rpcs3/mmjoystick.mjs";
import { loaders, savers } from "../../common/file.mjs";
import { user } from "../../common/settings.mjs";

const configTemplates = loaders.yml("config-templates/rpcs3.yml");
const rpcs3Path = user.paths.rpcs3;
const inputProfile = "autojoy-autogenerated-profile";
const inputConfigFileName = `config/input_configs/global/${inputProfile}.yml`;
const activeProfileFileName = `config/input_configs/active_input_configurations.yml`;
// for microphone settings
const generalConfigFileName = `config/config.yml`;
const customConfigsPath = `config/custom_configs`;

const getActiveInputProfileObject = () => ({
  ["Active Configurations"]: {
    global: inputProfile,
  },
});

// identifier for each slot in the input settings
const playerIdentifiers = [
  "Player 1 Input",
  "Player 2 Input",
  "Player 3 Input",
  "Player 4 Input",
  "Player 5 Input",
  "Player 6 Input",
  "Player 7 Input",
];

// the input setting "Handler" option
const inputHandlers = {
  sdl: "SDL",
  mmJoystick: "MMJoystick",
};

// Microphone
const microphoneDevicePrefix = `OpenAL Soft on `; // looks like RPCS3 uses OpenAL and it's not something configs can change
const microphoneMode = `Standard`;
const microphoneDeviceSeparator = "@@@";
const configAudioPath = `Audio`;
const configMicrophoneTypeKey = "Microphone Type";
const configMicrophoneDevicesKey = "Microphone Devices";

function renameDLSController(arr) {
  return arr.map((item) => {
    let name = item.name;

    switch (name) {
      case "PS5 Controller":
        name = "DualSense Wireless Controller";
        break;
      case "Controller (Xbox 360 Wireless Receiver for Windows)":
        name = "Xbox 360 Wireless Controller";
        break;
      default:
        break;
    }

    return { ...item, name };
  });
}

// rpcs3 uses the SDL device names + a number at the end.
// eg.: Xbox Series X Controller 1, DualSense Wireless Controller 1.
// the number is relative to how many of the same controller is connected. it's not a player/position indicator.
function appendNumbersToSDLDeviceNames(arr) {
  const counts = {};
  return arr.map((item) => {
    counts[item.name] = (counts[item.name] || 0) + 1;
    return { ...item, name: `${item.name} ${counts[item.name]}` };
  });
}

function handleSDLJoystickListUpdate(joystickList) {
  // updating device names to match what rpcs3 uses
  const fixedList = appendNumbersToSDLDeviceNames(
    renameDLSController(joystickList)
  );

  const newConfig = {};
  playerIdentifiers.forEach((identifier, position) => {
    const joystick = fixedList[position];

    // setting non-connected positions as empty
    if (!joystick) {
      newConfig[identifier] = configTemplates.Empty;
      return;
    }

    newConfig[identifier] = structuredClone(
      configTemplates[joystick.type] ?? configTemplates.Empty
    );

    try {
      let handler = inputHandlers.sdl;
      let device = joystick.name;

      if (
        mmjoystick.shouldUseMMJoystick(
          joystick.raw.vendor,
          joystick.raw.product
        )
      ) {
        const mmJoystickDevice = `Joystick #${mmjoystick.getMMJoystickIndex(
          joystick.raw.vendor,
          joystick.raw.product
        )}`;

        device = mmJoystickDevice;
        handler = inputHandlers.mmJoystick;
      }

      newConfig[identifier].Device = device;
      newConfig[identifier].Handler = handler;
    } catch (e) {
      console.error(
        "RPCS3 - Device couldn't be configured properly -",
        joystick.name
      );
      console.error(e);
    }
  });

  savers.yml(newConfig, path.resolve(rpcs3Path, inputConfigFileName));
  console.log(
    "RPCS3 - Input settings saved at",
    path.resolve(rpcs3Path, inputConfigFileName)
  );
  savers.yml(
    getActiveInputProfileObject(),
    path.resolve(rpcs3Path, activeProfileFileName)
  );
  console.log(
    "RPCS3 - Input profile settings saved at",
    path.resolve(rpcs3Path, activeProfileFileName)
  );
}

function handleMicrophoneListUpdate(microphoneList) {
  const currentConfig = loaders.yml(
    path.resolve(rpcs3Path, generalConfigFileName)
  );

  const slots = [
    microphoneList[0],
    microphoneList[1],
    microphoneList[2],
    microphoneList[3],
  ];

  const microphoneDevices = slots
    .map((mic) =>
      mic
        ? `${microphoneDevicePrefix}${mic.name}${microphoneDeviceSeparator}`
        : `${microphoneDeviceSeparator}`
    )
    .join("");

  currentConfig[configAudioPath][configMicrophoneTypeKey] = microphoneMode;
  currentConfig[configAudioPath][configMicrophoneDevicesKey] =
    microphoneDevices;

  savers.yml(currentConfig, path.resolve(rpcs3Path, generalConfigFileName));

  console.log(
    "RPCS3 - Microphone settings saved at",
    path.resolve(rpcs3Path, generalConfigFileName)
  );

  const customConfigs = path.resolve(rpcs3Path, customConfigsPath);
  if (fs.existsSync(customConfigs)) {
    fs.readdirSync(customConfigs).forEach((file) => {
      if (file.endsWith(".yml") || file.endsWith(".yaml")) {
        const customConfigPath = path.join(customConfigs, file);
        const customConfig = loaders.yml(customConfigPath);

        customConfig[configAudioPath][configMicrophoneTypeKey] = microphoneMode;
        customConfig[configAudioPath][configMicrophoneDevicesKey] =
          microphoneDevices;

        savers.yml(customConfig, customConfigPath);

        console.log("RPCS3 - Microphone settings saved at", customConfigPath);
      }
    });
  }
}

const rpcs3 = {
  handleJoystickListUpdate(joystickList) {
    handleSDLJoystickListUpdate(joystickList);
  },
  handleMicrophoneListUpdate,
};

export default rpcs3;
